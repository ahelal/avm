#!/bin/bash
set -e

ANSIBLE_BIN_PATH="{{ ANSIBLE_BIN_PATH }}"
ANSIBLE_BASEDIR="{{ ANSIBLE_BASEDIR }}"
ANSIBLE_SELECTED_VERSION="{{ ANSIBLE_SELECTED_VERSION }}"

#Function: help
print_help() {
echo """avm
Usage:
    avm  info
    avm  list
    avm  path <version>
    avm  use <version>
    avm  activate [version]
    avm  install (-v version) [-t type] [-l label] [-r requirements]

Options:
    info                        Show available installed ansible virtualenv
    list                        List current virtualenv version
    path <version>              Print binary path of specifc version
    use  <version>              Use a <version> for ansible virtualenv
    activate [version]          Activate python in the ansible virtualenv
"""
exit 0
}

print_install_help() {
echo """avm install
options:
  -v|--version        version to install (this is mandatory)
  -t|--type           type of installation git or pip
  -l|--label          if you need to create a label to point to verion
  -r|--requirements   if your using pip requirements.
"""
exit 0
}

show_installed(){
    ansible_link="$(readlink ${ANSIBLE_BASEDIR}/bin/ansible)"
    version="$(echo $ansible_link | sed 's|'"$ANSIBLE_BASEDIR"'||g ; s|/venv/bin/||g ; s|ansible||g; s|/||g')"
    echo "installed version: \"$version\""
}

show_versions(){
    cd $ANSIBLE_BASEDIR
    for version in *
    do
        [[ $version =~ ^(ansible-version)$ ]] && continue
        [[ $version =~ ^(bin)$ ]] && continue
        [[ $version =~ ^(avm)$ ]] && continue
        versions_list+="'${version}' "
    done
    echo "$versions_list"
}

# Verify version
verify_version(){
    versions_list="$(show_versions)"
    if ! [[ ${versions_list} == *"'${ANSIBLE_SELECTED_VERSION}'"* ]]; then
        echo "The desired version \"${ANSIBLE_SELECTED_VERSION}\" is not in the version list."
        echo "available version: $versions_list"
        exit 1
    fi
    if ! [ -d $ANSIBLE_BASEDIR/${ANSIBLE_SELECTED_VERSION}/venv/bin/ ]; then
        echo "Your virtualenv seems to be not installed or incorrect reference. \"$ANSIBLE_BASEDIR/${ANSIBLE_SELECTED_VERSION}/venv/bin/\" is not a valid directory"
        exit 1
    fi
}

print_path(){
  verify_version
  echo "${ANSIBLE_BASEDIR}/${ANSIBLE_SELECTED_VERSION}/venv/bin/"
}

setup_links(){
    verify_version

    for bin in ansible ansible-doc ansible-galaxy ansible-playbook ansible-pull ansible-vault ansible-console
    do
        echo "Ensuring symlink $ANSIBLE_BASEDIR/${ANSIBLE_SELECTED_VERSION}/venv/bin/$bin :is pointing to ${ANSIBLE_BASEDIR}/bin/${bin}"
        ln -sf $ANSIBLE_BASEDIR/${ANSIBLE_SELECTED_VERSION}/venv/bin/$bin ${ANSIBLE_BASEDIR}/bin/${bin}
    done
}

case $1 in
"info" | "installed")
  show_installed
  ;;
"list" | "versions")
  echo "current installed version: $(show_versions)"
  ;;
"path")
  [ -z "$2" ] && echo "path requires a version as an argument." && exit 1
  version="$2"
  export ANSIBLE_SELECTED_VERSION="$2"
  print_path
  ;;
"use" | "set")
  version="$2"
  [ -z "$2" ] && echo "use requires a version as an argument." && exit 1
  export ANSIBLE_SELECTED_VERSION="$2"
  setup_links
  ;;
"activate" )
    [ -z "$2" ] && echo "activate requires a version as an argument." && exit 1
    version="$2"
    export ANSIBLE_SELECTED_VERSION="$2"
    printf "> Attempt to activate (this will create a subshell). "
    print_path

    if [ "$SHELL" == "/bin/bash" ]; then
        /bin/bash --login --init-file $(print_path)/activate
    elif [ "$SHELL" == "/bin/zsh" ]; then
        mytmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')
        echo ". ~/.zshrc" > ${mytmpdir}/.zshrc
        echo ". $(print_path)/activate" >> ${mytmpdir}/.zshrc
        ZDOTDIR=${mytmpdir} zsh -i
    else
        echo "$SHELL is not supported." && exit 1
    fi
  ;;
"install" )
  [ -z "$2" ] && [ -z "$3" ] && echo "install requires arguments. for more help type 'avm install --help" && exit 1
  [ "${2}" == "-h" ] || [ "${2}" == "--help" ] && print_install_help
  shift
  while [[ $# -gt 1 ]]
  do
    key="$1"
    case ${key} in
        -v|--version)
          ANSIBLE_VERSIONS[0]="$2"
          shift ;;
        -t|--type)
          INSTALL_TYPE[0]="$2"
          shift ;;
        -l|--label)
          ANSIBLE_LABEL[0]="$2"
          shift ;;
        -r|--requirements)
          PYTHON_REQUIREMENTS[0]="$2"
          shift ;;
        -h|--help)
          print_install_help;;
        *)
          echo " unkown option ${1} for install." && exit 1
        ;;
    esac
    shift
  done
  [ -z "${ANSIBLE_VERSIONS[0]}" ] && echo " --version is required" && exit 1
  mytmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')
  curl -s https://raw.githubusercontent.com/ahelal/avm/master/setup.sh -o ${mytmpdir}/setup.sh
  echo "> You might be asked for your sudo password :"
  # Run Setup
  sudo whoami > /dev/null
  . ${mytmpdir}/setup.sh
;;
'')
  print_help
  ;;
*)
  echo "$0: Unkown option '$1'"
  print_help
  ;;
esac

exit 0
